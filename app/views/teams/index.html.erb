<div class="content">
	<div class="page-header full-content">
		<div class="row">
			<div class="col-sm-5">
				<h1>All Teams <small>(<%= Team.count %>)</small></h1>
			</div><!--.col-->
			<div class="col-sm-6">
				<ol class="breadcrumb">
					<li><a href="/"><i class="ion-home"></i></a></li>
					<li><a href="#" class="active">All Teams</a></li>
				</ol>
			</div><!--.col-->
			<div class="col-sm-1 text-right">
				<a class="btn btn-floating btn-pink" data-toggle="modal" data-target="#panel-new-team">
					<i class="ion-android-add"></i>
				</a>
			</div>
		</div><!--.row-->
	</div><!--.page-header-->

  <div clas="panel">
    <div class="panel-body">
      <div class="row">
        <div class="col-lg-6 col-lg-offset-4 col-md-8 col-md-offset-2 col-sm-12">
          <div class="padding-bottom-0">
            <div class="inputer">
              <!-- isotope filtering and typeahead-->
              <textarea type="text" class=" fs_30 lh_55 quicksearch-teams typeahead typeahead-teams form-control" rows="1" placeholder="Start typing team name here..."></textarea>
            </div>
          </div>
        </div><!--.col-md-9-->
      </div><!--.row-->
      <hr class="margin-top-10"/>
    </div>
  </div>
  

  <div class="bg-muted padding-top-40 padding-right-40 padding-left-40" style="background: #F7F7F7;">
    
    <div class="row teams">
      <%= render "team" %>	
    </div>
  </div>
      
</div><!--.row-->


<script type="text/javascript">
	// QUICKSEARCH USERS

	$( function() {
	  // quick search regex
	  var qsRegex;
	  
	  // init Isotope
	  var $grid = $('.teams').isotope({
	    itemSelector: '.element-item',
	    layoutMode: 'fitRows',
	    filter: function() {
	      return qsRegex ? $(this).text().match( qsRegex ) : true;
	    }
	  });

	  // use value of search field to filter
	  var $quicksearch = $('.quicksearch-teams').keyup( debounce( function() {
	    qsRegex = new RegExp( $quicksearch.val(), 'gi' );
	    $grid.isotope();
	  }, 200 ) );
	  
	});

	// debounce so filtering doesn't happen every millisecond
	function debounce( fn, threshold ) {
	  var timeout;
	  return function debounced() {
	    if ( timeout ) {
	      clearTimeout( timeout );
	    }
	    function delayed() {
	      fn();
	      timeout = null;
	    }
	    timeout = setTimeout( delayed, threshold || 100 );
	  }
	}
</script>

